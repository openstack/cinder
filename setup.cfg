[metadata]
name = cinder
summary = OpenStack Block Storage
description-file =
    README.rst
author = OpenStack
author-email = openstack-dev@lists.openstack.org
home-page = https://docs.openstack.org/cinder/latest/
classifier =
    Environment :: OpenStack
    Intended Audience :: Information Technology
    Intended Audience :: System Administrators
    License :: OSI Approved :: Apache Software License
    Operating System :: POSIX :: Linux
    Programming Language :: Python
    Programming Language :: Python :: 2
    Programming Language :: Python :: 2.7

[global]
setup-hooks =
    pbr.hooks.setup_hook

[files]
data_files =
    etc/cinder =
        etc/cinder/api-paste.ini
        etc/cinder/rootwrap.conf
        etc/cinder/resource_filters.json
    etc/cinder/rootwrap.d = etc/cinder/rootwrap.d/*
packages =
    cinder

[entry_points]
cinder.scheduler.filters =
    AvailabilityZoneFilter = cinder.scheduler.filters.availability_zone_filter:AvailabilityZoneFilter
    CapabilitiesFilter = cinder.scheduler.filters.capabilities_filter:CapabilitiesFilter
    CapacityFilter = cinder.scheduler.filters.capacity_filter:CapacityFilter
    DifferentBackendFilter = cinder.scheduler.filters.affinity_filter:DifferentBackendFilter
    DriverFilter = cinder.scheduler.filters.driver_filter:DriverFilter
    JsonFilter = cinder.scheduler.filters.json_filter:JsonFilter
    RetryFilter = cinder.scheduler.filters.ignore_attempted_hosts_filter:IgnoreAttemptedHostsFilter
    SameBackendFilter = cinder.scheduler.filters.affinity_filter:SameBackendFilter
    InstanceLocalityFilter = cinder.scheduler.filters.instance_locality_filter:InstanceLocalityFilter
    ShardFilter = cinder.scheduler.filters.shard_filter:ShardFilter
cinder.scheduler.weights =
    AllocatedCapacityWeigher = cinder.scheduler.weights.capacity:AllocatedCapacityWeigher
    CapacityWeigher = cinder.scheduler.weights.capacity:CapacityWeigher
    ChanceWeigher = cinder.scheduler.weights.chance:ChanceWeigher
    GoodnessWeigher = cinder.scheduler.weights.goodness:GoodnessWeigher
    VolumeNumberWeigher = cinder.scheduler.weights.volume_number:VolumeNumberWeigher
oslo.config.opts =
    cinder = cinder.opts:list_opts
oslo.config.opts.defaults =
    cinder = cinder.common.config:set_middleware_defaults
oslo.policy.enforcer =
    cinder = cinder.policy:get_enforcer
oslo.policy.policies =
    # The sample policies will be ordered by entry point and then by list
    # returned from that entry point. If more control is desired split out each
    # list_rules method into a separate entry point rather than using the
    # aggregate method.
    cinder = cinder.policies:list_rules
console_scripts =
    cinder-api = cinder.cmd.api:main
    cinder-backup = cinder.cmd.backup:main
    cinder-manage = cinder.cmd.manage:main
    cinder-rootwrap = oslo_rootwrap.cmd:main
    cinder-rtstool = cinder.cmd.rtstool:main
    cinder-scheduler = cinder.cmd.scheduler:main
    cinder-volume = cinder.cmd.volume:main
    cinder-volume-usage-audit = cinder.cmd.volume_usage_audit:main
wsgi_scripts =
    cinder-wsgi = cinder.wsgi.wsgi:initialize_application
# These are for backwards compat with Havana notification_driver configuration values
oslo_messaging.notify.drivers =
    cinder.openstack.common.notifier.log_notifier = oslo_messaging.notify._impl_log:LogDriver
    cinder.openstack.common.notifier.no_op_notifier = oslo_messaging.notify._impl_noop:NoOpDriver
    cinder.openstack.common.notifier.rpc_notifier2 = oslo_messaging.notify.messaging:MessagingV2Driver
    cinder.openstack.common.notifier.rpc_notifier = oslo_messaging.notify.messaging:MessagingDriver
    cinder.openstack.common.notifier.test_notifier = oslo_messaging.notify._impl_test:TestDriver
# These are for backwards compatibility with Juno middleware configurations
oslo_middleware =
    cinder.openstack.common.middleware.request_id = oslo_middleware.request_id

cinder.database.migration_backend =
    sqlalchemy = oslo_db.sqlalchemy.migration

[build_sphinx]
all_files = 1
warning-is-error = 1
build-dir = doc/build
source-dir = doc/source

[egg_info]
tag_build =
tag_date = 0
tag_svn_revision = 0

[compile_catalog]
directory = cinder/locale
domain = cinder

[update_catalog]
domain = cinder
output_dir = cinder/locale
input_file = cinder/locale/cinder.pot

[extract_messages]
keywords = _ gettext ngettext l_ lazy_gettext
mapping_file = babel.cfg
output_file = cinder/locale/cinder.pot
